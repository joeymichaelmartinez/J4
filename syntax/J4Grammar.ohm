J4 {
  Program     =  newline* Stmt+ newline*
  Stmt        =  SimpleStmt newline                                      -- simple
              |  "while" Exp Suite                                       -- while
              |  "for" ForParam "," Exp "," SimpleStmt? Suite            -- for
              |  "if" Exp Suite ("else if" Exp Suite)* ("else" Suite)?   -- if
              |  "Function" id "(" (Params | "Nothing") ")" "->" (Type | "Nothing") Suite? -- functionDec
              |  "struct" id Suite                                       -- struct
              |  "init" "(" Params ")" Suite?                            -- init
  SimpleStmt  =  Type Ids "<-" Exps                                      -- vardeclAndAssign
              |  Type Ids                                                -- vardecl
              |  VarExps "<-" Exps                                       -- assign
              |  Call                                                    -- call
              |  CreateObj                                               -- createObj
              |  "break"                                                 -- break
              |  "return" Exp?                                           -- return
  Suite       =  newline indent Stmt+ dedent
  ForParam    =  Type id "<-" Exp                                        -- loopingVarDec
              |  id                                                      -- outsideVar
  Exp         =  Exp1 ("and" Exp1)*                                      -- and
              |  Exp1 ("or" Exp1)*                                       -- or
              |  Exp1
  Exp1        =  Exp2 relop Exp2                                         -- binary
              |  Exp2
  Exp2        =  Exp2 addop Exp3                                         -- binary
              |  Exp3
  Exp3        =  Exp3 mulop Exp4                                         -- binary
              |  Exp4
  Exp4        =  Exp5 "^" Exp5                                           -- binary
              |  Exp5
  Exp5        =  prefixop Exp6                                           -- unary
              |  Exp6
  Exp6        =  boollit
              |  numlit
              |  strlit
              |  Call
              |  VarExp
              |  "(" Exp ")"                                            -- parens
  Call        =  VarExp "(" Args ")"
  CreateObj   = "new" VarExp "(" Args ")"

  Type        = Type "[]"                                               -- typeOfArray
              | "Number"
              | "String"
              | "Boolean"
              | FuncAsType
              | id
              | "(" FuncAsType ")" "[]"                                -- typeArrayOfFunction

  FuncAsType = "(" Type ("," Type)* ")" "->" Type

  Exps        =  NonemptyListOf<Exp, ",">
  Ids         =  NonemptyListOf<id, ",">
  VarExp      =  VarExp "[" Exp "]"                                    -- subscripted
              |  VarExp "." id ("(" Args ")")?                         -- dotOperator
              |  id                                                    -- simple
  VarExps     =  NonemptyListOf<VarExp, ",">
  Param       =  id (":" Type)
  Params      =  ListOf<Param, ",">
  Arg         =  Exp
  Args        =  ListOf<Arg, ",">

  keyword     =  ( "not" | "true" | "false" | "Number" | "String" | "Boolean" | "while" | "for" | "break"
              | "or" | "and" | "if" | "else" | "return" | "struct" | "init" | "new") ~idrest
  id          =  ~keyword ("_" | letter) idrest*
  idrest      =  "_" | alnum
  numlit      =  digit+ ("." digit+)?
  boollit     =  "true" | "false"
  strlit      = "\"" (~"\\" ~"\"" ~"\n" any | escape)* "\""
  escape      = "\\" ("\\" | "\"" | "n")                               -- simple
              | "\\u{" hexDigit+ "}"                                   -- codepoint
  addop       =  "+" | "-"
  relop       =  "<=" | "<" | "=" | "!=" | ">=" | ">"
  mulop       =  "*" | "/" | "%"
  prefixop    =  "-" | "not"
  indent      =  "⇨"
  dedent      =  "⇦"

  newline     =  "\n"+ | "\r\n"+
  space      :=  " " | "\t"
}
