J4 {
  Program     =  newline* Stmt (Stmt | newline)*
  Stmt        =  SimpleStmt newline                                      -- simple
              |  While
              |  For
              |  If
              |  Function
              |  "struct" id Suite                                       -- struct
              |  "init" "(" Params ")" Suite                             -- init
  SimpleStmt  =  Type Ids "<-" Exps                                      -- vardeclAndAssign
              |  Type Ids                                                -- vardec
              |  VarExps "<-" Exps                                       -- assign
              |  Call                                                    -- call
              |  (&While | &For) "break"                                 -- break
              |  "return" dedent                                         -- return
  Suite       =  newline indent Stmt+ dedent                             -- large
  While       =  "while" Exp Suite                                       -- while
  For         =  "for" ForParam1 "," Exp "," SimpleStmt? Suite           -- for
  If          =  "if" Exp Suite ("else if" Exp Suite)* ("else" Suite)?   -- if
  Function    =  "Function" id "(" Params ")" "->" Type FuncBlock        -- functionDec
  FuncBlock   =  newline indent Stmt* ("return" Exp? newline)? dedent    -- return
  ForParam1   =  Type id "<-" Exp                                        -- loopingVarDec
              |  id                                                      -- outsideVar

  Exp         =  Exp1 (logicop Exp1)*
  Exp1        =  Exp2 relop Exp2                                         -- binary
              |  Exp2
  Exp2        =  Exp2 addop Exp3                                         -- binary
              |  Exp3
  Exp3        =  Exp3 mulop Exp4                                         -- binary
              |  Exp4
  Exp4        =  Exp5 "^" Exp5                                           -- binary
              |  Exp5
  Exp5        =  prefixop Exp6                                           -- unary
              |  Exp6
  Exp6        =  boollit
              |  numlit
              |  strlit
              |  Call
              |  VarExp
              |  "(" Exp ")"                                            -- parens
  Call        =  VarExp "(" Args ")"                                    -- regCall
              |  "new" VarExp "(" Args ")"                              -- objCreation

  Type        = "Nothing"
              | "Number"
              | "String"
              | "Boolean"
              | FuncAsType
              | id
              | "Number[]"
              | "String[]"
              | "Boolean[]"
              | "(" FuncAsType ")[]"                                   -- types
              | id"[]"                                                 -- ArrayOfObj
  FuncAsType = "(" Type ("," Type)* ")" "->" Type

  Exps        =  NonemptyListOf<Exp, ",">
  Ids         =  NonemptyListOf<id, ",">
  VarExp      =  VarExp "[" Exp "]"                                    -- subscripted
              |  id"."id                                               -- dotOperator
              |  id                                                    -- simple
  VarExps     =  NonemptyListOf<VarExp, ",">
  Param       =  id (":" Type)?
  Params      =  ListOf<Param, ",">
  Arg         =  Exp
  Args        =  ListOf<Arg, ",">

  keyword     =  ( "not" | "true" | "false" | "Number" | "String" | "Boolean" | "while" | "for" | "break"
              | "or" | "and" | "if" | "else" | "return" | "struct" | "init" | "new") ~idrest
  id          =  ~keyword ("_" | letter) idrest*
  idrest      =  "_" | alnum
  numlit      =  digit+ ("." digit+)?
  boollit     =  "true" | "false"
  strlit      = "\"" (~"\\" ~"\"" ~"\n" any | escape)* "\""
  escape      = "\\" ("\\" | "\"" | "n")                               -- simple
              | "\\u{" hexDigit+ "}"                                   -- codepoint
  logicop     =  "and" | "or"
  addop       =  "+" | "-"
  relop       =  "<=" | "<" | "=" | "!=" | ">=" | ">"
  mulop       =  "*" | "/" | "%"
  prefixop    =  "-" | "not"
  indent      =  "⇨"
  dedent      =  "⇦"

  newline     =  "\n"+ | "\r\n"+
  space      :=  " " | "\t" | comment | multicmnt
  comment     =  indent* "~" (~newline any)* &newline dedent*
  multicmnt   =  indent* "(~" (~"~)" any)* "~)" dedent*
}
