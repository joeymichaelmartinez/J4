J4 {
    Program           = newline* Block newline*
    Block             = Statement+
    IndentedBlock     = indent Block dedent
    Statement         = If                          --if
                      | Loops                       --loops
                      | Exp                         --expression
                      | Declaration                 --declarations
                      | Assignment                  --assignment
                      | Call                        --call
                      | Break                       --break
                      | "return" Exp? newline       --return
    Declaration       = FuncDec                     --functionDeclaration
                      | VarDeclaration              --variableDeclaration
                      | ArrayDeclaration            --arrayDeclaration
                      | ObjDeclaration              --objectDeclaration
    Break             =  "break"
    VarDeclaration    = Type id ("," id)*                                                                       --varInstantiation
                      | Type id ("," id)* "<-" Exp ("," Exp)*                                                   --varInstantiationAndDeclaration
                      | "Function" "(" Type ")" "->" id ("," id)*                                        --varInstantiationForFunction
                      | "Function" "(" Type ")" "->" id ("," id)* "<-" FunctionExp ("," FunctionExp)*    --varInstantiationAndDeclarationForFunction
                      | id id("," id)*                                                                          --varInstantiationForObject
                      | id id("," id)* "<-" ObjExp ("," ObjExp)                                                 --varInstantiationAndDeclarationForObject
    Assignment        = id ("," id)* "<-" Exp ("," Exp)*                     --varAssignment
                      | id ("," id)* "<-" FunctionExp ("," FunctionExp)*     --varAssignmentForFunction
                      | id id("," id)* "<-" ObjExp ("," ObjExp)              --varAssignmentForObject
    FunctionExp       = id | AnonymousFunctDec
    ObjExp            = id | ObjInstantiation

    ObjDeclaration    = "struct" id newline indent Block? (ObjInit Block?)+ dedent
    ObjInit           = "init" "(" (id ":" Type ("," id ":" Type)*)? ")" IndentedBlock
    ObjInstantiation  = "new" id "(" Exp ("," Exp)* ")"

    ArrayDeclaration  = Type "[]" id

    FuncDec           = "Function" id "(" (id ":" FuncDecParam ("," id ":" FuncDecParam)*)? ")" "->" Type newline IndentedBlock
    AnonymousFunctDec = "Function" "(" (id ":" FuncDecParam ("," id ":" FuncDecParam)*)? ")" "->" Type newline IndentedBlock
    Type              = "Nothing" | "Number" | "String" | "Boolean" | FuncAsParam
                      | "Number[]" | "String[]" | "Boolean[]" | "(" FuncAsParam ")[]" --types
    FuncDecParam      = id ":" Type
    FuncAsParam       = "(" Type ("," Type)* ")" "->" Type


    If                = "if" Exp newline IndentedBlock ElseIf* Else?
    ElseIf            = "else if" Exp newline IndentedBlock
    Else              = ("else" newline IndentedBlock)
    Loops             = For | While
    For               = "for" ForParam1 "," Exp ("," Assignment)? newline IndentedBlock
    ForParam1         = "Number" id "<-" Exp                           --forLoopParameterOneDeclaration
                      | id                                             --forLoopParameterOnePassedVariable
    While             = "while" Exp newline IndentedBlock

    Exp               = Exp1 ("and" Exp1)* | Exp1 ("or" Exp1)*
    Exp1              = Exp2 (relop Exp2)?
    Exp2              = Exp3 (addop Exp3)*
    Exp3              = Exp4 (mulop Exp4)*
    Exp4              = Exp5 ("^"  Exp5)?
    Exp5              = prefixop Exp6
    Exp6              = boollit |  numlit | strlit | Call
                      | VarExp "." Exp6                                 --dotOperator
                      | VarExp
                      | "(" Exp ")"                                     --parethesis

    Call              = VarExp "(" Args ")"
    VarExp            = VarExp "[" Exp "]"                              --arrayReferencing
                      | id
    Args              = ListOf<Exp, ",">

    id                = ~keyword ("_" | letter) idrest*
    idrest            = "_" | alnum
    numlit            = digit+ ("." digit+)?
    boollit           = "true" | "false"
    strlit            = "\"" (~"\\" ~"\"" ~"\n" any | escape)* "\""

    keyword           =  ( "not" | "true" | "false" | "Number" | "String" | "Boolean" | "while" | "for" | "break" | "or" | "and" | "if" | "else" | "return") ~idrest
    escape            = "\\" ("\\" | "\"" | "n")            --simple
                        | "\\u{" hexDigit+ "}"              --codepoint
    newline           = "\n"+
    space            :=  " " | "\t" | "\n" | comment
    comment           = "~" (~"\n" any)* "\n"
    relop             = ">" | "<" | "=" | ">=" | "<="
    addop             = "+" | "-"
    mulop             = "*" | "/" | "%"
    prefixop          =  "-" | "not"
    indent            =  "⇨"
    dedent            =  "⇦"
}
